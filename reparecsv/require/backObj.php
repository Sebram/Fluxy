<?phprequire "config.php";class Obj {		protected $cnx;	private $conf;	private $table_ref;	private $classname;	public $path_to_write;	public function setObj ($object_name=null) 	{			// connexion DB et implemente "Model" qui contient des fonctions de requête.				$this->conf = new Config();				$this->cnx = new Model( $this->conf );				$this->cnx->set();				// Si un nom de table est donné alors une classe est g&néré 		// avec des setter pour tous les champs correspondants à la table.				if($object_name !== null) {					$this->table_ref = $this->cnx->getRefTable($object_name);					array_shift($this->table_ref);					$data = "<?php".chr(13)."class DB".ucfirst($object_name)." {".chr(13).chr(13);			$data .= "public \$array_ref;".chr(13);					if(copy('require/Obj.php', 'require/backObj.php')) {						foreach ($this->table_ref as $ref) { 										$data .= "\t# ".strtoupper($object_name)." - ".ucfirst($ref['COLUMN_NAME']).chr(13);							$data .= "\t# ============================================ ".chr(13);										$data .= "\tpublic \$".$ref['COLUMN_NAME'].";".chr(13);										$data .= "\tpublic function set".ucfirst($ref['COLUMN_NAME'])."(\$value){ ";					$data .= "\$this->".$ref['COLUMN_NAME']."=\$value;"; 					$data .= "\$this->array_ref['".$ref['COLUMN_NAME']."']=\$value; }".chr(13);										$data .= "\tpublic function get".ucfirst($ref['COLUMN_NAME'])."(){ ";										$data .= "return \$this->".$ref['COLUMN_NAME']."; }".chr(13).chr(13);				}								$data .= "public function getRefArray(){ return \$this->array_ref; }".chr(13);								$data .= chr(13).'}';								if(!file_exists('class')){ mkdir('class'); }								if(file_exists('class/DB'.ucfirst($object_name).'.php')) {					unlink('class/DB'.ucfirst($object_name).'.php');				}							file_put_contents('class/DB'.ucfirst($object_name).'.php', $data);								$this->classname = 'class/DB'.ucfirst($object_name).'.php';			}		}	}	public function getTable () 	{		    return $this->table_ref;	}	public function getcnx () 	{	    return $this->cnx;	}	public function getclassname () 	{			return $this->classname;	}	public function infileQuery(&$habitation, &$path, &$tablename, &$telhab="" )		{		$cles = [];				$handle = fopen($path, "r");				if ($handle) {						    while (($line = fgets($handle)) !== false) {				    // process the line read.		    // echo $line.'<br>';				    $cles [] = explode(";", $line );				    break;				  }		  		  fclose($handle);				} else {			echo  " error opening the file.";				}				# Put the csv file $path here.				$query  = " LOAD DATA LOCAL INFILE '".$path."' ".chr(13);				# Put the table name here.				$query .= " INTO TABLE ".$tablename." ".chr(13);				# $separated ( Dans ce cas chaque est séparé par un ';' )				$query .= " FIELDS TERMINATED BY ';' ".chr(13);				# $enclosed ( Chaque champ est entouré de double-quote )		$query .= " ENCLOSED BY '\"' ".chr(13);				# $terminated ( Chaque ligne se termine par un retour chariot ) 				$query .= " LINES TERMINATED BY '\\n' ".chr(13);				# Si TRUE On ignore la première ligne.				$query .= " IGNORE 1 LINES ".chr(13);				# On liste les références des champs du fichier CSV				$x=0; $habitrefarray = $habitation->getRefArray();				$query .=	" (";		array_walk($cles[0], $loop=function($item, $key) {			$query .= "@$cle,"; 				 	if ($x%2==0) { 		 		$query .= chr(13);		 	}				});				$query = substr($query, 0, -2).")".chr(13);				$query .=	" SET ".chr(13);				foreach ($habitrefarray as $key => $value) {					if( $value != '@') {						$query .=	$key." = ".$value.','.chr(13); 						}				}				$query = substr($query, 0, -2).';'; 			return $query;	}		private function handle($path)	{		$handle = fopen( $path, "r" );		return $handle;	}	private function csvKeys($handle) 	{		$cles = [];		if ( $handle ) {							while ( ( $line = fgets($handle) ) !== false) {				// process the line read.				// echo $line.'<br>';				$cles [] = explode( ";", $line );				break;			}					fclose( $handle );				} else {					echo  " error opening the file.";		}		return $cles;	}	private function loadDataHead($path, $tablename) 	{		$query  = " LOAD DATA LOCAL INFILE '".$path."' ".chr(13);				# Put the table name here.				$query .= " INTO TABLE ".$tablename." ".chr(13);				# $separated ( Dans ce cas chaque est séparé par un ';' )				$query .= " FIELDS TERMINATED BY ';' ".chr(13);				# $enclosed ( Chaque champ est entouré de double-quote )				$query .= " ENCLOSED BY '\"' ".chr(13);				# $terminated ( Chaque ligne se termine par un retour chariot ) 				$query .= " LINES TERMINATED BY '\\n' ".chr(13);				# Si TRUE On ignore la première ligne.				$query .= " IGNORE 1 LINES ".chr(13).chr(13);		return $query;	}	private function loadDataRefListing(&$query, &$cles) 	{		# On liste les références des champs du fichier CSV		$query .=	" (";		$valuequery="";		array_walk($cles[0], $loop=function($cle, $key) use (&$valuequery) {						$valuequery .= '@'.str_replace( '"','',$cle ).', '; 				});		$valuequery = substr( $valuequery, 0, -2 );		$query .= $valuequery . ")" .chr( 13 ).chr( 13 );		return $query;	}	public function initQuery( &$post, &$path, &$tablename, $telhab="" )	{		//echo $path;		//----		$handle = $this->handle($path);				$cles = $this->csvKeys($handle);				//----		$nbch = count( $cles[0] );				//echo "<h3>".$nbch." champs par ligne.</h3>";				# Put the csv file $path here.				$query = $this->loadDataHeadQuery($path, $tablename);				$query .= $this->loadDataRefListing($query, $cles);		$query .=	" SET " .chr(13);		$x=0;		array_walk($post, $loop_post = function($item, $key) use (&$query, &$post, &$x) {			if( @$post["csvref-$x"] != "" )	{				$query .= strtolower( @$post["tableref-$x"] )." = ";				if( @$post["csvref-$x"] == "" ) { 					$query .= "'',"; 				} elseif( $x == ( count($post)-1 ) )  {										$query .= @$post["csvref-$x"] .chr(13); 								} else {					$query .= @$post["csvref-$x"].','.chr(13);				}			}			$x++;		});		$query = substr( $query, 0, -2 ).';'; 					return $query;	}		public function setPathToWrite($path) 	{ 		  $this->path_to_write = $path; 	}	public function write( $items ) 	{		array_walk( $items, $walk_write = function ( $items, $key ) {			  file_put_contents( $this->path_to_write, utf8_encode(@$items).chr(13).chr(10), FILE_APPEND );			} );		}}